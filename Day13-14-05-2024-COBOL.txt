
Ground Rules
------------
01. You need to be on the call from 9.00 to to 6.00 pm compulsory.
02. Most of the training time will be utilized for hands on.
03. Do daily revision of topics taught during the day.
04. Ask questions in case of doubts. 
05. Make the session interactive.
-----------------------------------------------------------------------------------------------------------------------------

Error messages :-
-----------------
TSO/ISPF
--------
01. No members in data set : this means your PDS is empty. There are no members in the PDS.
02. No space in directory  : you have exceeded the limit of Directory Blocks

VSAM error
----------
01. Invalid Related Object : You are creating an AIX for a base cluster which has been created using REUSE parameter.
			     You must remove REUSE in DEFINE CLUSTER command to resolve this error.

COBOL file status codes
-----------------------
01. "00"	- File operation successful.
02. "10"	- End of File
03. "22"	- Duplicate primary key


ABnormal ENDs (ABEND CODES)
---------------------------
01. 0B37 - if you do not have space left in dataset to enter data.
02. S322 - you get this abend when your job has executed beyond the time limit specified in TIME parameter.
03. S806 - invalid program name specified in PGM parameter of EXEC statement
04. S804 - space limit exceeded in REGION parameter of JOB command.
05. S80A - space limit exceeded in REGION parameter of JOB command.
06. S0C7 - you have typed a special character in a numeric field data.
07. S0C4 - 1. mismatch in DD names in RUN JCL and COBOL program.
	   2. STOP RUN not coded in COBOL program.

JCL programs
------------
01. JCL01 - IEFBR14 - allocate a dataset.
02. JCL02 - IEBGENER - display dataset contents in spool.
03. JCL03 - IEFBR14 - delete a dataset
04. JCL04 - IEBGENER - copy dataset
05. JCL05 - SORT - Sort on one/two field/s
06. JCL06 - SORT - INCLUDE/OMIT command to sort specific records.
07. JCL07 - SORT - OUTREC to reformat fields in output file
08. JCL08 - SORT - Copy all/specific records
09. JCL09 - SORT - Copy records (split a file into two or more files)
10. JCL10 - SORT - Eliminate duplicates
11. JCL11 - Instream procedure 
12. JCL12 - Instream procedure + symbolic parameter + default value
13. JCL13 - Catalogued Procedure
14. JCL14 - JCL using Multiple Job Steps
15. JCL15 - Define a GDG
16. JCL16 - Define a Model for the GDG
17. JCL17 - Define a GDS
18. JCL18 - Populate data in a GDS
19. JCL19 - Using GDS in two job steps
20. JCL20 - COND parameter in JOB statement
21. JCL21 - COND parameter in EXEC statement

COBOL programs
--------------
01. COBOL01 - Basic program - DISPLAY, ACCEPT, COMPUTE
02. COBOL02 - IF - ELSE - END-IF
03. COBOL03 - PERFORM
04. COBOL04 - Validate the input, Nested IF ELSE END-IF, IS NOT NUMERIC
05. COBOL05 - EVALUATE, Edit characters
06. COBOL06 - PIC V, how to display numerical value using decimal point
07. COBOL07 - PERFORM ... TIMES, display statistics
08. COBOL08 - Sequential table
09. COBOL09 - Indexed table, SEARCH, SET
10. COBOL10 - Signed variable
11. COBOL11 - Display all records of PS file in spool.
12. COBOL12 - Copy all records of PS file to PS file.
13. COBOL13 - String manipulation - INSPECT, STRING, UNSTRING commands.
14. COBOL14 - Copy all records from PS file to KSDS.
15. COBOL15 - Copy valid records of PS file to KSDS and invalid records of PS file to ERROR.PS file. + COPY command
16. COBOL16 - Display all records of KSDS in spool. + COPY command
17. COBOL17 - 88-level.

VSAM programs
-------------
01. VSAM01  - DELETE KSDS -> DEFINE KSDS
02. VSAM02  - REPRO (copy)
03. VSAM03  - REPRO (REPRO options)
04. VSAM04  - ALTER
05. VSAM05  - LISTCAT
06. VSAM06  - DELETE ESDS -> DEFINE ESDS -> REPRO
07. VSAM07  - Alternate Index (Unique)    : DELETE -> DEFINE AIX -> BLDINDEX -> DEFINE PATH
08. VSAM08  - Alternate Index (Nonunique) : DELETE -> DEFINE AIX -> BLDINDEX -> DEFINE PATH

-----------------------------------------------------------------------------------------------------------------------------
Knowledge Checks
----------------
01. What is the PIC clause of File Status variable ?
02. What is FILE-CONTROL ?
03. What is the difference between OUTPUT mode and EXTEND mode ?
04. What is the file status code for End of File ?
05. Explain the clause : LABEL RECORDS ARE STANDARD.
06. I want to split one string into two smaller strings. Which command should I use for this ?
07. If the file operation command is successful, then what value will be stored in file status variable ?
08. When will I get S0C4 abend ?
09. In which division and section will you define record buffer of a file ?
10. In SELECT clause coded in ENVIRONMENT DIVISION, what is the significance of dd-name ?
----------------------------------------------------------------------------------------------------------------------------


01.	KSDS file handling

	- In KSDS file, we can perform all file operations - read, write, update, delete.

	- KSDS file opening modes :-

		Mode		Description
		----		-----------
		OUTPUT		Used to write new records in an empty KSDS.
				If KSDS already has records, then OUTPUT mode will overwrite the records.

		EXTEND		Used to add new records in an empty KSDS.

		INPUT		Used to read records from a KSDS.

		I-O		Used to insert records, update records, delete records.

	- ENVIRONMENT DIVISION entries

		ENVIRONMENT DIVISION.
		INPUT-OUTPUT SECTION.
		FILE-CONTROL.
			SELECT logical-file-name ASSIGN TO dd-name 
			ORGANIZATION IS INDEXED
			ACCESS MODE IS SEQUENTIAL | RANDOM | DYNAMIC 	-> for KSDS
			RECORD KEY IS primary-key-field-name		-> for KSDS
			FILE STATUS IS file-status-variable.

		Points
		------
		- ACCESS MODE IS SEQUENTIAL | RANDOM | DYNAMIC
			SEQUENTIAL - you can read a KSDS only sequentially (from 1st record to last record) -> LIFT
			RANDOM     - you can read a KSDS randomly (read from a specific record) -> SHOPPING
			DYNAMIC    - you can read a KSDS randomly + sequentially. -> GRAMAPHONE/ BOOK

	- DATA DIVISION

		DATA DIVISION.
		FILE SECTION
		FD	logical-file-name
			LABEL RECORDS ARE STANDARD.

		01	record-buffer-name.
			05	primary-key-field-name		PIC data-type(width).
			05	FILLER				PIC data-type(width). --> width = record-length - width


02.	COBOL14 - copy all records of PS file to KSDS 

	Problem Definition :-
	
	Write a program which will copy all records from PS file to KSDS file.
	Before writing the record in KSDS file, format name, project and join date as implemented in COBOL13.
	Records having duplicate employee numbers must not be written in KSDS.
	At the end of the program, display total number of records copied, total valid records, total invalid records.


	Instructions :-
	---------------
	01. Delete VSAM01 which you have in VSAM.PGMS PDS.
	02. Type E on left of VSAM.PGMS and (VSAM01) on right of PGMS.
	03. COPY "OZAGS3.VSAM.PGMS(VSAM01)"
	04. CHANGE ALL OZAGS3 OZA???
	05. Save. Submit. Check if the COMPANY.KSDS.CLUSTER, COMPANY.KSDS.DATA, COMPANY.KSDS.INDEX have been created.

	06. Type E on left of COBOL.PGMS.ADVANCED and (COBOL14) on right of ADVANCED.
	07. COPY "OZAGS3.COBOL.PGMS.ADVANCED(COBOL14)"
	08. Save.
	09. In Compiler JCL -> CBLCMPLK -> on line 12, 14 -> code member name as COBOL14. Save. Submit.
	10. In Run JCL -> CBLRUN :-
		> on line 9, code COBOL14 in PGM parameter.
		> code DD statements as follows :-

			//DD1		DD	DSN=OZA???.EMP.PS1,DISP=OLD
			//DD2		DD	DSN=OZA???.COMPANY.KSDS.CLUSTER,DISP=OLD

	11. Save. Submit. Goto spool and check the messages in SYSOUT.
	12. Open KSDS cluster in FM and check if records have been copied.

	13. Open EMP.PS1 and duplicate any any 2 employee numbers. Save.
	14. Run your program. Goto spool and check messages in SYSOUT.
	15. Open KSDS cluster in FM and check if records have been copied with unique employee numbers.


03.	COBOL15 - copy all valid records of PS file to KSDS and invalid records to ERROR.PS file

	Problem Definition :-
	
	Write a program which will copy all records from PS file to KSDS file.
	Before writing the record in KSDS file, format name, project and join date as implemented in COBOL13.
	Records having duplicate employee numbers must not be written in KSDS.
	At the end of the program, display total number of records copied, total valid records, total invalid records.
	The program should copy valid records to KSDS and invalid records to ERROR.PS file.


	Instructions :-
	---------------
	01. Rename any one PS file which you do not want to OZA???.ERROR.PS. 
	    Do not rename EMP.PS1 file since it is the input file.

	02. Type E on left of COBOL.PGMS.ADVANCED and (COBOL15) on right of ADVANCED.
	03. COPY "OZAGS3.COBOL.PGMS.ADVANCED(COBOL15)"
	04. Save.
	05. In Compiler JCL -> CBLCMPLK -> on line 12, 14 -> code member name as COBOL15. Save. Submit.
	06. In Run JCL -> CBLRUN :-
		> on line 9, code COBOL15 in PGM parameter.
		> code DD statements as follows :-

			//DD1		DD	DSN=OZA???.EMP.PS1,DISP=OLD
			//DD2		DD	DSN=OZA???.COMPANY.KSDS.CLUSTER,DISP=OLD
			//DD3		DD	DSN=OZA???.ERROR.PS,DISP=OLD

	07. Save. Submit. Goto spool and check the messages in SYSOUT.
	08. Open KSDS cluster in FM and check if valid records have been copied.
	09. Open ERROR.PS file and check if invalid records have been copied.


04.	COBOL16 - display all records of KSDS in spool.

	Problem Definition :-
	---------------------
	Write a program which will display all records of KSDS in spool. At the end of the program, display total records.

	Instructions :-
	---------------
	01. Type E on left of COBOL.PGMS.ADVANCED and (COBOL16) on right of ADVANCED.
	02. COPY "OZAGS3.COBOL.PGMS.ADVANCED(COBOL16)"
	03. Save.
	04. In Compiler JCL -> CBLCMPLK -> on line 12, 14 -> code member name as COBOL16. Save. Submit.
	05. In Run JCL -> CBLRUN :-
		> on line 9, code COBOL16 in PGM parameter.
		> code DD statements as follows :-

			//DD1		DD	DSN=OZA???.COMPANY.KSDS.CLUSTER,DISP=OLD

	06. Save. Submit. Goto spool and check the output in SYSOUT.


05.	COPYBOOK

	- A copybook is a member which contains reusable code i.e. the code which you want to type in more than one
	  programs.

	- The advantage of copybook is you write the code in one member and use it in multiple programs. Another
	  advantage is if you want to make changes to the reusable code, then you make the changes in only one place -
	  where you have written the reusable code.

	- Copybook is implemented by coding COPY command in a program.

	- Syntax :-

		COPY copybook-member-name.

	  In a program, wherever you want the code to be plugged-in, you must type COPY command as shown above.


	Instructions :-
	---------------
	01. Type E on left of COBOL.COPYLIB and (WSRECORD) on right of COPYLIB.
	02. COPY "OZAGS3.COBOL.COPYLIB(WSRECORD)". Save.
	03. Open COBOL15. Delete the following code present in the program :-
			01  WS-RECORD.                       
			    05    EMP-NO        PIC 9(04).   
			    05    FILLER        PIC X(01).   
			    05    EMP-NAME      PIC X(25).   
			    05    FILLER        PIC X(01).   
			    05    PROJECT       PIC X(10).   
			    05    FILLER        PIC X(01).   
			    05    JOIN-DATE     PIC X(10).   
			    05    FILLER        PIC X(01).   
			    05    MOBILE-NO     PIC 9(10).   
			    05    FILLER        PIC X(01).   
			    05    SALARY        PIC 9(06).   

	04. Type COPY WSRECORD. command below WORKING-STORAGE SECTION and save the code.
	05. Compile the program. Goto spool. In SYSPRINT -> COMPILE, press F8 multiple times till WORKING-STORAGE SECTION.
	06. You will see COPY command and the code plugged-in from the copybook.

	07. Open COBOL16. Delete the code shown in Point 03 above from the program.
	08. Type COPY WSRECORD. command below WORKING-STORAGE SECTION. and save the code.
	09. Compile the program. Goto spool. In SYSPRINT -> COMPILE, press F8 multiple times till WORKING-STORAGE SECTION.
	10. You will see COPY command and the code plugged-in from the copybook.

	11. Now open WSRECORD from COBOL.COPYLIB. Change data type of EMP-NO to X and width of EMP-NAME to 30. Save.
	12. Compile COBOL15. Goto spool. In SYSPRINT -> COMPILE, press F8 multiple times till WORKING-STORAGE SECTION.
	13. You will see COPY command and the code plugged-in from the copybook. Check if EMP-NO data type is X and
	    width of EMP-NAME is 30.
	14. Compile COBOL16. Goto spool. In SYSPRINT -> COMPILE, press F8 multiple times till WORKING-STORAGE SECTION.
	15. You will see COPY command and the code plugged-in from the copybook. Check if EMP-NO data type is X and
	    width of EMP-NAME is 30.


06.	Conditional Name - 88-level

	- 88-level stands for Conditional Name (Name given to a condition)

	- By using 88-level, you do not decrease number of lines in code and speed of the program remains the same.
	  The advantages of 88-level are   1. ease in reading the code and 2. code maintenance.

	- If you have the same condition in 3 places in a program and if you have assigned a conditional name to the condition.
 	  down the line if you want to change the value in the condition, then you only need to change the value in 88 level
	  declaration in WORKING-STORAGE SECTION. You need not change anything in PROCEDURE DIVISION. This way you save a
	  lot of time while maintaining the code.


	Instructions :-
	---------------
	01. Create a new member COBOL17 in COBOL.PGMS.ADVANCED.
	02. COPY "OZAGS3.COBOL.PGMS.ADVANCED(COBOL17)".
	03. Save. Compile the program. Run the program. 
	04. Goto spool and check the output. You should see each message displayed 5 times.
	
	05. Switch to your program. Change the value 6 on line 12 to 10. 
	06. Save. Compile the program. Run the program. 
	07. Goto spool and check the output. You should see each message displayed 9 times.

	08. Switch to your program. Change the value 10 on line 12 to 4. 
	09. Save. Compile the program. Run the program.
	10. Goto spool and check the output. You should see each message displayed 3 times.

	You will observe that you need to make the change only in WORKING-STORAGE SECTION without making any change in 
	PROCEDURE DIVISION code. This is the advantage of using 88-level in a program.


07.	Self Study Topics 

	1. 66-level -> RENAMES clause
	2. PERFORM - VARYING - UNTIL


08.	Assignment : COBOL15A

	01. Rename any one PS file which you do not require to STUDENT.PS. Enter the following data in the file (10 records)
		ROLLNO  9(04),	STUD-NAME   X(30),	PERCENTAGE 9(02).

		> Enter Student name as firstname and surname
		> Enter 3 duplicate roll numbers.

	02. Define a KSDS cluster - OZA???.STUDENT.KSDS.CLUSTER, OZA???.STUDENT.KSDS.DATA, OZA???.STUDENT.KSDS.INDEX
	    The cluster must be empty.

	03. Write a program which will copy all records from STUDENT.PS file to STUDENT.KSDS.CLUSTER.
	    Note the following points :-
		> Before writing the record in the KSDS, 
			> remove - from the name.
			> Student name must be in the format surname firstname

		> After writing the record in the KSDS, the program should check for duplicate roll numbers. If you have
		  a record with duplicate roll number, then write such a record in ERROR.PS file.

	    At the end of the program, display the following statistics :-
		> total records
		> total valid records
		> total invalid records.

	Outcome of program :-
	---------------------
	> valid records must be in KSDS.
	> invalid records must be in ERROR.PS
	> statistical values (total record count, valid record count, invalid record count) must be displayed correctly in spool
					









































