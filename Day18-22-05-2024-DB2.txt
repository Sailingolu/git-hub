
Ground Rules
------------
01. You need to be on the call from 9.00 to to 6.00 pm compulsory.
02. Most of the training time will be utilized for hands on.
03. Do daily revision of topics taught during the day.
04. Ask questions in case of doubts. 
05. Make the session interactive.
-----------------------------------------------------------------------------------------------------------------------------

Error messages :-
-----------------
TSO/ISPF
--------
01. No members in data set : this means your PDS is empty. There are no members in the PDS.
02. No space in directory  : you have exceeded the limit of Directory Blocks

VSAM error
----------
01. Invalid Related Object : You are creating an AIX for a base cluster which has been created using REUSE parameter.
			     You must remove REUSE in DEFINE CLUSTER command to resolve this error.

COBOL file status codes
-----------------------
01. "00"	- File operation successful.
02. "10"	- End of File
03. "22"	- Duplicate primary key
04. "23"	- Primary key/ Alternate key not found

DB2 SQLCODEs
-------------
01.  0		- SQL command has executed successfully.
02.  100	- End of SELECT, Delete all rows from an empty table.
03. -117	- number of values in INSERT not matching with number of columns
04. -181	- Date value invalid in date column.
05. -204	- Invalid table name
06. -206        - Invalid column name
07. -408	- Invalid data type
08. -601	- Object (table) already exists.
09. -803 	- duplicate primary key


ABnormal ENDs (ABEND CODES)
---------------------------
01. 0B37 - if you do not have space left in dataset to enter data.
02. S322 - you get this abend when your job has executed beyond the time limit specified in TIME parameter.
03. S806 - invalid program name specified in PGM parameter of EXEC statement
04. S804 - space limit exceeded in REGION parameter of JOB command.
05. S80A - space limit exceeded in REGION parameter of JOB command.
06. S0C7 - you have typed a special character in a numeric field data.
07. S0C4 - 1. mismatch in DD names in RUN JCL and COBOL program.
	   2. STOP RUN not coded in COBOL program.
08. U4038 - 1. Accessing a location of a table outside its limits.

JCL programs
------------
01. JCL01 - IEFBR14 - allocate a dataset.
02. JCL02 - IEBGENER - display dataset contents in spool.
03. JCL03 - IEFBR14 - delete a dataset
04. JCL04 - IEBGENER - copy dataset
05. JCL05 - SORT - Sort on one/two field/s
06. JCL06 - SORT - INCLUDE/OMIT command to sort specific records.
07. JCL07 - SORT - OUTREC to reformat fields in output file
08. JCL08 - SORT - Copy all/specific records
09. JCL09 - SORT - Copy records (split a file into two or more files)
10. JCL10 - SORT - Eliminate duplicates
11. JCL11 - Instream procedure 
12. JCL12 - Instream procedure + symbolic parameter + default value
13. JCL13 - Catalogued Procedure
14. JCL14 - JCL using Multiple Job Steps
15. JCL15 - Define a GDG
16. JCL16 - Define a Model for the GDG
17. JCL17 - Define a GDS
18. JCL18 - Populate data in a GDS
19. JCL19 - Using GDS in two job steps
20. JCL20 - COND parameter in JOB statement
21. JCL21 - COND parameter in EXEC statement

COBOL programs
--------------
01. COBOL01 - Basic program - DISPLAY, ACCEPT, COMPUTE
02. COBOL02 - IF - ELSE - END-IF
03. COBOL03 - PERFORM
04. COBOL04 - Validate the input, Nested IF ELSE END-IF, IS NOT NUMERIC
05. COBOL05 - EVALUATE, Edit characters
06. COBOL06 - PIC V, how to display numerical value using decimal point
07. COBOL07 - PERFORM ... TIMES, display statistics
08. COBOL08 - Sequential table
09. COBOL09 - Indexed table, SEARCH, SET
10. COBOL10 - Signed variable
11. COBOL11 - Display all records of PS file in spool.
12. COBOL12 - Copy all records of PS file to PS file.
13. COBOL13 - String manipulation - INSPECT, STRING, UNSTRING commands.
14. COBOL14 - Copy all records from PS file to KSDS.
15. COBOL15 - Copy valid records of PS file to KSDS and invalid records of PS file to ERROR.PS file. + COPY command
16. COBOL16 - Display all records of KSDS in spool. + COPY command
17. COBOL17 - 88-level.
18. COBOL18 - Alternate Index (unique)
19. COBOL19 - ACCESS MODE DYNAMIC
20. COBOL20 - SORT
21. COBOL21S, COBOL21T - CALL / EXIT PROGRAM
22. COBOL22S, COBOL22T - CALL .. USING / LINKAGE SECTION
23. COBOL23S, COBOL23T - Product program
24. COBOL24 - REDEFINES clause, SSRANGE compiler option

VSAM programs
-------------
01. VSAM01  - DELETE KSDS -> DEFINE KSDS
02. VSAM02  - REPRO (copy)
03. VSAM03  - REPRO (REPRO options)
04. VSAM04  - ALTER
05. VSAM05  - LISTCAT
06. VSAM06  - DELETE ESDS -> DEFINE ESDS -> REPRO
07. VSAM07  - Alternate Index (Unique)    : DELETE -> DEFINE AIX -> BLDINDEX -> DEFINE PATH
08. VSAM08  - Alternate Index (Nonunique) : DELETE -> DEFINE AIX -> BLDINDEX -> DEFINE PATH

DB2 programs
------------
01. CREATE - create table/ create index/ drop table
02. INSERT - insert/ delete
03. UPDATE - update
04. SELECT - select
05. DB201  - copy records from PS file to table
-----------------------------------------------------------------------------------------------------------------------------
Knowledge Checks
----------------
01. In which member SQLCODE variable is declared ?
02. The programming technique employed in DB2 is known by what name ?
03. Why do we use host variable ?
04. When should we give : before the host variable and when we should not give : before host variable ?
05. Which utility will you use to create host variable declaration ?
06. What is the full form of SQLCA ?
07. In one EXEC SQL block, how many SQL commands can be coded ?
08. What is the difference between COMPILE process and BIND process in DB2 ?
09. Which of the following commands cannot be coded in EXEC SQL block ? - a. INCLUDE  b. INSERT  c. DELETE   d. DISPLAY
10. INCLUDE command is similar to which command in COBOL ?
----------------------------------------------------------------------------------------------------------------------------

01. 	How to find length of a string ?

	77	STUD-NAME	PIC X(15)	VALUE "AJAY SHARMA----".

	What is the length of the name stored in STUD-NAME ?	-> 11

	Steps :-
		1. Find the width of the variable and store it in a variable W.		-> W = 15

		2. Reverse the string stored in the string variable.			-> ----AMRAHS YAJA

		3. Count leading - in the reversed string and store the count in N	-> N = 4

		4. L = W - N								-> 11

	Sample code :-

		MOVE LENGTH OF STUD-NAME TO W. 					---> STEP 1		-> W = 15

		INSPECT FUNCTION REVERSE(STUD-NAME) TALLYING N FOR LEADING "-"  ---> STEP 2,3		-> N = 4

		COMPUTE L = W - N.						----> STEP 4		-> L = 11


02.	How to handle a VARCHAR column in a COBOL/DB2 program ?

	- If you define a VARCHAR column in a table, then the host variable of VARCHAR column in DCLGEN member will 
	  have two child elements declared at 49 level - one will be LEN variable and the other will be TEXT variable.

		 01  DCLEMPLOYEE.                                             
		     10 HV-EMPNO             PIC S9(4) USAGE COMP.            
		     10 HV-EMPNAME.                                           <---- host variable of VARCHAR column
		        49 HV-EMPNAME-LEN    PIC S9(4) USAGE COMP.            <---- child elements
		        49 HV-EMPNAME-TEXT   PIC X(15).                       <---- child elements
		     10 HV-MOBILENO          PIC X(10).                       

	- Before inserting the string value in the table :-
	  A. TEXT variable will contain the string value to be inserted in the table.
	  B. LEN variable must contain the length of the string value to be inserted in the table.

	  For example, if a NAME variable contains "AJAY SHARMA----" and you want to insert this name in the table. Then :-

			> MOVE NAME to HV-EMPNAME-TEXT			-> HV-EMPNAME-TEXT = "AJAY SHARMA----"
			
			> MOVE LENGTH OF HV-EMPNAME-TEXT TO W. 					---> STEP 1	-> W = 15
		          INSPECT FUNCTION REVERSE(HV-EMPNAME-TEXT) TALLYING N FOR LEADING "-"  ---> STEP 2,3	-> N = 4
		          COMPUTE HV-EMPNAME-LEN = W - N.					----> STEP 4	-> HV-EMPNAME-LEN=11

	- Remember the following point specific for VARCHAR column host variable :-
		     10 HV-EMPNAME.                                           <---- host variable of VARCHAR column
		        49 HV-EMPNAME-LEN    PIC S9(4) USAGE COMP.            <---- child elements
		        49 HV-EMPNAME-TEXT   PIC X(15).                       <---- child elements

		> HV-EMPNAME (10 level) should not be coded outside EXEC SQL block. It must always be coded inside EXEC SQL block.
		> LEN, TEXT variables (49 level) must always be coded outside EXEC SQL block. They must not be coded inside EXEC SQL
	          block.


03.	DB201 - Handle VARCHAR column

	Instructions
	------------
	01. Open CREATE01 member. For EMPNAME column, change CHAR(15) to VARCHAR(15). DROP TABLE, COMMIT should be uncommented.
	02. Save. Run CREATE01 in SPUFI. -> Check if you are getting SQLCODE 0 for CREATE TABLE and CREATE UNIQUE INDEX 
	-----------------------------------------------------------------------------------------------------------------------
	03. Create DCLGEN member for EMPLOYEE table as follows :-
		OPTION  1	: EMPLOYEE
		OPTION  4	: 'OZA???.DB2.DCLGEN(EMPLOYEE)'
		OPTION  6	: REPLACE
		OPTION  9	: HV-
		OPTION 11	: YES
	04. Open the DCLGEN member EMPLOYEE and check if you are able to see two 49 level child elements for EMPNAME column.
	05. If yes, you can close the member.
	-----------------------------------------------------------------------------------------------------------------------
	06. Delete DB201 from OZA???.DB2.PROGRAMS PDS.
	07. Type E on left of OZA???.DB2.PROGRAMS and (DB201) on right of PROGRAMS
--->	08. COPY "OZAGS3.DB2.PROGRAMS(DB201)".  -> Save.
	09. Open compiler CBLDBCMP -> type DB201 on line 19,20,21 -> Save -> Submit -> You will get MAXCC=4 -> Ignore this.
	10. Open bind CBLDBBND -> type DB201 on line 23 -> Save -> Submit -> You will get MAXCC=4 -> Ignore this
	11. Open run CBLDBRUN -> type DB201 on line 19 and OZA???.EMP.PS1 in DD1 DD statement -> Save -> Submit -> MAXCC=0.
	12. Goto spool and see the messages in SYSOUT.
	13. Run SELECT01 in SPUFI and check if rows have been inserted in EMPLOYEE table. You will not see - in name.
	-----------------------------------------------------------------------------------------------------------------------


04.	How to handle a NULL column in COBOL/DB2 program ?

	- A null column is defined by not coding NOT NULL against the column in CREATE TABLE command.

	- If a column has been defined as a NULL column, it means such a column can have data values as well as NULL value.
	  NULL value in a column is entered as --------- by DB2.

	- How to insert NULL value in a NULL column ?

		01. Define an indicator variable for the NULL column in WORKING-STORAGE SECTION.

			> The name of the indicator variable is user defined.
			> PIC clause of indicator variable must be S9(04) COMP.

			Example :-
			77	MOBILENO-IV	PIC S9(04) COMP.

		02. In Procedure Division, the code to handle NULL column will be as follows :-

			Template :-
				IF input-variable does not have data (is empty)
					MOVE -1 TO indicator variable of NULL column
								-> -1 means you want NULL value to be inserted in column
				ELSE
					MOVE 0 TO indicator variable of NULL column
								-> 0 means you want a proper value to be inserted in column
					MOVE input-variable TO host-variable of NULL column
				END-IF

			Example :-
				IF MOBILENO-PS = SPACES
					MOVE -1 TO MOBILENO-IV	-> -1 means you want NULL value to be inserted in column
				ELSE
					MOVE 0 TO MOBILENO-IV	-> 0 means you want a proper value to be inserted in column
					MOVE MOBILENO-PS TO HV-MOBILENO
				END-IF

		03. In INSERT command, code as follows :-

			EXEC SQL
				INSERT INTO ______ VALUES(________,  ________, :HV-MOBILENO:MOBILENO-IV)
			END-EXEC.

			Before inserting the row, DB2 will check the indicator variable (MOBILENO-IV) of NULL column.

			If indicator variable of NULL column is -1
				DB2 will put NULL value (----------) in MOBILENO column

			If indicator variable of NULL column is 0
				DB2 will put HV-MOBILENO value in MOBILENO column


05.	DB201 - Handle NULL column

	Instructions
	------------
	01.	Open CREATE01 and make the following change :-
			          MOBILENO    CHAR(10)          ----> remove NOT NULL on MOBILENO line

	02. 	Remove comment from DROP TABLE, COMMIT.
	03.	Save. Run CREATE01 in SPUFI. Check if SQLCODE is 0 for CREATE TABLE and CREATE UNIQUE INDEX commands
	----------------------------------------------------------------------------------------------------------------
	04.	Update your DCLGEN member EMPLOYEE using 9.SP command
		OPTION  1	: EMPLOYEE
		OPTION  4	: 'OZA???.DB2.DCLGEN(EMPLOYEE)'
		OPTION  6	: REPLACE
		OPTION  9	: HV-
		OPTION 11	: YES
	05.	Open your DCLGEN member EMPLOYEE and check if it has been updated. You will not see NOT NULL in MOBILENO
	----------------------------------------------------------------------------------------------------------------
	06. Delete DB201 from OZA???.DB2.PROGRAMS PDS.
	07. Type E on left of OZA???.DB2.PROGRAMS and (DB201) on right of PROGRAMS
	08. COPY "OZAGS3.DB2.PROGRAMS(DB201)".  -> Save.
	09. Open compiler CBLDBCMP -> type DB201 on line 19,20,21 -> Save -> Submit -> You will get MAXCC=4 -> Ignore this.
	10. Open bind CBLDBBND -> type DB201 on line 23 -> Save -> Submit -> You will get MAXCC=4 -> Ignore this

	11. Open OZA???.EMP.PS1 -> For any two employee records type spaces in MOBILENO field. -> Save.

	12. Open run CBLDBRUN -> type DB201 on line 19 and OZA???.EMP.PS1 in DD1 DD statement -> Save -> Submit -> MAXCC=0.
	13. Run SELECT01 in SPUFI and check if NULL value (----------) has been entered in MOBILENO column for the 
	    employees without mobile number.
	----------------------------------------------------------------------------------------------------------------


06. 	DB202 - SELECT a row

	Problem Definition :-
	---------------------
	Accept empno in SYSIN. The program should search empno in table. If it is present, display all details
	of the employee. If empno is not present in the table, then display an error message.


	Instructions
	------------
	01. Type E on left of OZA???.DB2.PROGRAMS and (DB202) on right of PROGRAMS
	02. COPY "OZAGS3.DB2.PROGRAMS(DB202)".  -> Save.
	03. Open compiler CBLDBCMP -> type DB202 on line 19,20,21 -> Save -> Submit -> You will get MAXCC=4 -> Ignore this.
	04. Open bind CBLDBBND -> type DB202 on line 23 -> Save -> Submit -> You will get MAXCC=4 -> Ignore this
	05. Open run CBLDBRUN. Make the following changes :-
		//SYSTSIN  DD *                                 
		    DSN SYSTEM(DBAG)                            
		       RUN PROGRAM(DB202)      -                	<----- see here
		       PLAN(OZA???PG)             -             
		       LIBRARY('OZA???.DB2.LOADLIB')            
		    END                                         
		/*                                              
		//SYSIN   DD   *                                <----- see here
		1072                                            <----- see here
		/*                                              <----- see here
		//*DD1      DD DSN=OZA???.EMP.PS1,DISP=OLD      <----- see here. it has been commented.

	06. Save. Submit. Goto spool and check the output.
	07. You can test this program for some other employee numbers.


07.	Assignment 02 
	01. Make changes in CUSTOMER table structure in CREATE$1 as follows :-

			CUSTOMER
			--------
			CUSTOMER_ID	SMALLINT	NOT NULL	PRIMARY KEY,
			CUSTOMER_NAME	VARCHAR(20)	NOT NULL,			<----------------
			STATUS		CHAR(10)					<----------------

	02. Run CREATE$1 in SPUFI.
		> After running CREATE$1 member :-
		  > if you are getting -204 on DROP TABLE command, then comment DROP TABLE and COMMIT commands.
		  > if you are getting -601 on CREATE TABLE command, then do not comment DROP TABLE and COMMIT commands.
		  > if you are getting 0 for all commands (DROP TABLE, COMMIT, CREATE TABLE, CREATE UNIQUE INDEX)
		    then it is correct.
	---------------------------------------------------------------------------------------------------------------------
	03. Update DCLGEN member
		OPTION  1	: CUSTOMER
		OPTION  4	: 'OZA???.DB2.DCLGEN(CUSTOMER)'
		OPTION  6	: REPLACE
		OPTION  9	: HV-
		OPTION 11	: YES

	04. Open DCLGEN member CUSTOMER and check if CUSTOMER_NAME is a VARCHAR column and STATUS is a NULL column.
	    Also check 49 level names in the host variable section.
	---------------------------------------------------------------------------------------------------------------------
	05. Open CUSTOMER.PS and enter spaces in STATUS field for any 2 records. -> Save.
	---------------------------------------------------------------------------------------------------------------------
	06. Create a new member DB201B in DB2.PROGRAMS. COPY "OZAGS3.DB2.PROGRAMS(DB201)"
	    Make changes in DB201B in appropriate lines to copy all records from PS file to table.
	---------------------------------------------------------------------------------------------------------------------
	07. Create a new member DB202A in DB2.PROGRAMS. COPY "OZAGS3.DB2.PROGRAMS(DB202)"
	    Make changes in DB202A in appropriate lines to display details of a customer. The program should accept customer
	    id in SYSIN
	---------------------------------------------------------------------------------------------------------------------












































	
	


















